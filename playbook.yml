---
- name: "Deploy Docker"
  hosts: "{{ tower_env | default([]) }}"
  gather_facts: true
  become: true
  become_method: sudo
  become_user: root

  tasks:

    - name: "Install Docker"
      when: inv_install_docker | default(false)
      block:
        - name: "Include labocbz.install_docker"
          tags:
            - "labocbz.install_docker"
          vars:
            install_docker_portainer: "{{ inv_install_docker_portainer }}"
            install_docker_portainer_http_port: "{{ inv_install_docker_portainer_http_port }}"
            install_docker_portainer_https_port: "{{ inv_install_docker_portainer_https_port }}"
            install_docker_portainer_agent_port: "{{ inv_install_docker_portainer_agent_port }}"
            install_docker_portainer_container_name: "{{ inv_install_docker_portainer_container_name }}"
            install_docker_portainer_volume_name: "{{ inv_install_docker_portainer_volume_name }}"
            install_docker_portainer_ssl: "{{ inv_install_docker_portainer_ssl }}"
            install_docker_portainer_ssl_volume_name: "{{ inv_install_docker_portainer_ssl_volume_name }}"
            install_docker_portainer_ssl_key: "{{ inv_install_docker_portainer_ssl_cert }}"
            install_docker_watchtower: "{{ inv_install_docker_watchtower }}"
            install_docker_watchtower_poll_interval: "{{ inv_install_docker_watchtower_poll_interval }}"
            install_docker_watchtower_cleanup: "{{ inv_install_docker_watchtower_cleanup }}"
            install_docker_watchtower_include_restarting: "{{ inv_install_docker_watchtower_include_restarting }}"
            install_docker_watchtower_include_stopped: "{{ inv_install_docker_watchtower_include_stopped }}"
            install_docker_watchtower_no_restart: "{{ inv_install_docker_watchtower_no_restart }}"
            install_docker_portainer_address: "{{ inv_install_docker_portainer_address }}"
          ansible.builtin.include_role:
            name: "labocbz.install_docker"

    - name: "Install GitLab runner"
      when: inv_install_gitlab_runner | default(false)
      block:
        - name: "Include labocbz.install_gitlab_runner"
          tags:
            - "labocbz.install_gitlab_runner"
          vars:
            install_gitlab_runner_concurrent: "{{ inv_install_gitlab_runner_concurrent }}"
            install_gitlab_runner_session_timeout: "{{ inv_install_gitlab_runner_session_timeout }}"
            install_gitlab_runner_image: "{{ inv_install_gitlab_runner_image }}"
            install_gitlab_runner_name: "{{ inv_install_gitlab_runner_name }}"
            install_gitlab_runner_url: "{{ inv_install_gitlab_runner_url }}"
            install_gitlab_runner_token: "{{ inv_install_gitlab_runner_token }}"
            install_gitlab_runner_config_volume: "{{ inv_install_gitlab_runner_config_volume }}"
            install_gitlab_runner_docker_tls_verify: "{{ inv_install_gitlab_runner_docker_tls_verify }}"
            install_gitlab_runner_docker_image: "{{ inv_install_gitlab_runner_docker_image }}"
          ansible.builtin.include_role:
            name: "labocbz.install_gitlab_runner"


    - name: "Handler Docker clean"
      when: inv_handle_docker_clean | default(false)
      block:
        - name: "Set facts for cleaning jon"
          ansible.builtin.set_fact:
            var_handle_docker_clean_cron_file: "{{ inv_handle_docker_clean_cron_file | default('ansible_docker_system_prune') }}"
            var_handle_docker_clean_weekday: "{{ inv_handle_docker_clean_weekday | default('*') }}"
            var_handle_docker_clean_minute: "{{ inv_handle_docker_clean_minute | default('0') }}"
            var_handle_docker_clean_hour: "{{ inv_handle_docker_clean_hour | default('*/6') }}"

        - name: "Create a cron file under /etc/cron.d"
          ansible.builtin.cron:
            cron_file: "{{ var_handle_docker_clean_cron_file }}"
            name: "Docker System Prune"
            weekday: "{{ var_handle_docker_clean_weekday }}"
            minute: "{{ var_handle_docker_clean_minute }}"
            hour: "{{ var_handle_docker_clean_hour }}"
            user: root
            job: "docker system prune --all --volumes --force"
            state: present

    - name: "Handler Docker No clean"
      when: not (inv_handle_docker_clean | default(false))
      block:
        - name: "Set facts for cleaning jon"
          ansible.builtin.set_fact:
            var_handle_docker_clean_cron_file: "{{ inv_handle_docker_clean_cron_file | default('ansible_docker_system_prune') }}"

        - name: "Remove a cron file under /etc/cron.d"
          ansible.builtin.cron:
            cron_file: "{{ var_handle_docker_clean_cron_file }}"
            name: "Docker System Prune"
            state: absent
